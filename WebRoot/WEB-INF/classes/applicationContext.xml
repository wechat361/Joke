<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"     
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:p="http://www.springframework.org/schema/p"     
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
   	   xsi:schemaLocation="http://www.springframework.org/schema/beans 
   				http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
       			http://www.springframework.org/schema/aop 
       			http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
       			http://www.springframework.org/schema/tx 
       			http://www.springframework.org/schema/tx/spring-tx-3.0.xsd   
       			http://www.springframework.org/schema/context 
       			http://www.springframework.org/schema/context/spring-context-3.0.xsd">
       			
   <!-- 加载jdbc配置文件 -->
   <!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:jdbc.properties</value>
            </list>
        </property>
    </bean> -->
    <context:property-placeholder location="classpath:jdbc.properties" />
       		
   <!-- dataSource数据源配置 -->
   <!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
   		<property name="driverClassName" value="${connection.driverClass}"></property>
   		<property name="url" value="${connection.url}"></property>
   		<property name="username" value="${connection.username}"></property>
   		<property name="password" value="${connection.password}"></property>
   		<property name="maxActive" value="${connection.maxActive}"></property>
   		<property name="maxIdle" value="${connection.maxIdle}"></property>
   		<property name="maxWait" value="${connection.maxWait}"></property>
   		<property name="validationQuery" value="select count(1) from Dual"></property>
		test when get connection
		<property name="testOnBorrow" value="true"></property>
		test when return connection to pool
		<property name="testOnReturn" value="true"></property>
		<property name="testWhileIdle" value="true"></property>
   </bean> -->
   
   <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   		<property name="driverClass" value="${connection.driverClass}"></property>
   		<property name="jdbcUrl" value="${connection.url}"></property>
   		<property name="user" value="${connection.username}"></property>
   		<property name="password" value="${connection.password}"></property>
   		<property name="initialPoolSize" value="1" />  
        <property name="minPoolSize" value="0" />  
        <property name="maxPoolSize" value="10" />  
        <property name="acquireIncrement" value="5" />  
        <property name="maxIdleTime" value="10" />  
        <property name="maxStatements" value="0" />
        <property name="preferredTestQuery" value="select count(1) from Dual" />
   </bean>
   
   <!-- 创建sessionFactory，同时指定数据源 -->
   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
   		<property name="dataSource" ref="dataSource"></property>
   		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
   </bean>
   
   <!-- 定义BaseDao -->
   <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
   		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
   </bean>
   
   <!-- 配置事务管理器 -->
   <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   		<property name="dataSource" ref="dataSource"></property>
   </bean>
   
   <!-- 声明事务策略（即定义AOP通知） -->
   <tx:advice id="txAdvice" transaction-manager="transactionManager">
   		<tx:attributes>
   			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="add*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.RuntimeException" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
				rollback-for="java.lang.Exception" />

			<tx:method name="*" read-only="true" />
   		</tx:attributes>
   </tx:advice>
   
   <!-- 定义通知器 -->
   <aop:config>
   		<!-- execution(* com.ctlovedove.joke.service.*.*(..))定义在service包或者子包里的任意方法的执行 -->
   		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.ctlovedove.joke.service.*.*(..))"/>
   </aop:config>
	
</beans>